{"version":3,"sources":["SelectRate.js","SelectCurrency.js","CurrentDate.js","App.js","serviceWorker.js","index.js"],"names":["SelectRate","currencyList","this","props","currencies","react_default","a","createElement","className","map","elem","index","key","title","txt","cc","rate","React","Component","SelectCurrency","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","sellInputValue","buyInputValue","sellSelectValue","buySelectValue","sellRate","buyRate","sellSelectChange","bind","assertThisInitialized","buySelectChange","inputChange","changeCurrencies","push","forEach","item","rateUSD","setState","toFixed","event","firstRate","target","value","currentValue","currentRate","type","min","onChange","onClick","disabled","nullCorrect","num","CurrentDate","date","Date","day","getDate","month","getMonth","year","getFullYear","App","loading","fetch","response","json","data","src_CurrentDate","src_SelectCurrency","src_SelectRate","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94c48715.chunk.js","sourcesContent":["import React from \"react\";\n\nclass SelectRate extends React.Component {\n    \n\n    render() {\n        let currencyList = this.props.currencies;\n        return (\n                <table className='center'>\n                    <caption>Current exchange rates</caption>\n                    <tbody>\n                    <tr>\n                        <th>Currency</th>\n                        <th>Rate</th>\n                    </tr>\n                    {\n                      currencyList.map((elem, index)=>{\n                        return (<tr key={index}>\n                            <td title={elem.txt}>{elem.cc}</td> \n                            <td>{elem.rate}</td> \n                            </tr>)\n                          })\n                    }\n                    </tbody>\n                    \n                </table>\n        );\n    }\n}\n\nexport default SelectRate;","import React from \"react\";\n\nclass  SelectCurrency extends React.Component {\n    constructor(props) {\n      super(props)\n      this.state = {\n        sellInputValue: 1,\n        buyInputValue: 1,\n        sellSelectValue: 'UAH',\n        buySelectValue: 'USD',\n        sellRate: 1,\n        buyRate: 0 \n      }\n      this.sellSelectChange = this.sellSelectChange.bind(this);\n      this.buySelectChange = this.buySelectChange.bind(this);\n      this.inputChange = this.inputChange.bind(this);\n      this.changeCurrencies = this.changeCurrencies.bind(this);\n    }\n\n    async componentDidMount() {\n      this.props.currencies.push({\"rate\": 1, \"cc\": \"UAH\"});\n      let rateUSD;\n      this.props.currencies.forEach(item => {\n          if(item.cc === \"USD\") {\n              rateUSD = item.rate;\n          }\n      });\n      this.setState({ \n          buyInputValue: (1 / rateUSD).toFixed(2), \n          buyRate: rateUSD \n        });\n    }\n\n    sellSelectChange(event) {\n        let firstRate;\n        this.props.currencies.forEach(item => {\n            if(item.cc === event.target.value) {\n                firstRate = item.rate;\n            }\n        });\n      this.setState({\n        sellSelectValue: event.target.value, \n        sellRate: firstRate, \n        buyInputValue: (firstRate * this.state.sellInputValue / this.state.buyRate).toFixed(2)\n    });\n    }\n\n    buySelectChange(event) {\n      let rate;\n      this.props.currencies.forEach(item => {\n          if(item.cc === event.target.value) {\n              rate = item.rate;\n          }\n      });\n    this.setState(\n        {\n          buySelectValue: event.target.value,\n          buyRate: rate,\n          buyInputValue: (this.state.sellRate * this.state.sellInputValue / rate).toFixed(2)\n      });   \n    }\n\n    inputChange(event) {\n      this.setState({\n        sellInputValue: event.target.value,\n        buyInputValue: (this.state.sellRate * event.target.value / this.state.buyRate).toFixed(2)\n      });\n    }\n\n    changeCurrencies() {\n        const currentValue = this.state.sellSelectValue;\n        const currentRate = this.state.sellRate;\n        this.setState({\n            sellSelectValue: this.state.buySelectValue,\n            buySelectValue: currentValue,\n            buyInputValue: (this.state.buyRate * this.state.sellInputValue / this.state.sellRate).toFixed(2),\n            sellRate: this.state.buyRate,\n            buyRate: currentRate\n        });\n    }\n\n    render() {\n        let currencyList = this.props.currencies;\n      \n        return (\n          <div className=\"currency_exchange\">\n          <div>\n              <span>Sell</span>\n              <div className=\"currency\">\n              <input \n                  type=\"number\" \n                  min=\"1\"\n                  value={this.state.sellInputValue} \n                  className=\"soldCurrency\"\n                  onChange={this.inputChange}\n                  />\n                  <select value={this.state.sellSelectValue} onChange={this.sellSelectChange}>\n                  {\n                      currencyList.map((elem, index)=>{\n                      return (<option key={index} value={elem.cc} rate={elem.rate}>\n                          {elem.cc}\n                      </option>)\n                      })\n                  }\n              </select>\n              </div> \n              \n          </div>\n          <button onClick={this.changeCurrencies}><i className=\"fas fa-exchange-alt\"></i></button>\n          <div>\n              <span>Buy</span>\n              <div>\n              <input \n                  type=\"number\"\n                  value={this.state.buyInputValue}\n                  disabled={true}\n              />\n              <select value={this.state.buySelectValue} onChange={this.buySelectChange} rate={this.state.buyInputValue}>\n                  {\n                      currencyList.map((elem, index)=>{\n                      return (<option key={index} value={elem.cc} rate={elem.rate}>\n                          {elem.cc}\n                      </option>)\n                      })\n                  }\n              </select>\n              </div>\n          </div>\n      </div>\n        );\n    }\n}\n\nexport default SelectCurrency;","import React from \"react\";\n\nfunction nullCorrect(num) {\n    return num < 10 ? \"0\" + num : num;\n}\n\nclass CurrentDate extends React.Component {\n    render() {\n        const date = new Date();\n        let day = date.getDate();\n        let month = date.getMonth();\n        let year = date.getFullYear();\n        day = nullCorrect(day);\n        month = nullCorrect(month);\n        return (\n            <hgroup className=\"centerHgroup\">\n                <h1>Currency Converter</h1>\n                <h3>According to the NBU rate on {day}.{month}.{year}</h3>\n            </hgroup>\n        );\n    }\n}\n\nexport default CurrentDate;","import React from 'react';\nimport SelectRate from './SelectRate.js';\nimport SelectCurrency from './SelectCurrency.js';\nimport CurrentDate from './CurrentDate.js';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      loading: true,\n      currencies: null\n    };\n  }\n\n  async componentDidMount() {\n    const url = \"https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?json\";\n    const response = await fetch(url);\n    const data = await response.json();\n    \n    this.setState({ currencies: data, loading: false});\n}\n\nrender() {\n  if (this.state.loading) {\n      return <div>loading...</div>;\n    }\n\n    if (!this.state.currencies) {\n      return <div>didn't get a currency</div>;\n    }\n\n  return (\n      <div>\n          <CurrentDate />\n          <SelectCurrency currencies={this.state.currencies} />\n          <SelectRate currencies={this.state.currencies} />\n      </div> \n  )\n}\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}